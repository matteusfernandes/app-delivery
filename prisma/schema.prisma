// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String   @unique
  password String
  role     UserRole @default(CUSTOMER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  orders Order[]
  
  @@map("users")
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  urlImage    String
  description String?
  category    String?
  available   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  orderItems OrderItem[]
  
  @@map("products")
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  totalPrice    Float
  deliveryAddress String
  deliveryNumber  String
  status        OrderStatus @default(PENDING)
  saleDate      DateTime    @default(now())
  
  // Informações de pagamento
  paymentMethod String?
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  
  @@map("sales")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  
  // Relacionamentos
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

enum UserRole {
  CUSTOMER
  SELLER
  ADMINISTRATOR
}

enum OrderStatus {
  PENDING
  PREPARING
  DISPATCHED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}
